{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nexport function throwIfInvalidProps(props) {\n  checks.forEach(function (check) {\n    return check.validate(props);\n  });\n}\n\nvar PropCheck = function PropCheck(isInvalid, errorText) {\n  var _this = this;\n\n  _classCallCheck(this, PropCheck);\n\n  this.validate = function (props) {\n    if (_this.isInvalid(props)) {\n      throw new Error(_this.errorText + \" Check usage of react-native-date-picker.\");\n    }\n  };\n\n  this.isInvalid = isInvalid;\n  this.errorText = errorText;\n};\n\nvar widthCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.width && typeof props.style.width !== 'number';\n}, 'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.');\nvar heightCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.height && typeof props.style.height !== 'number';\n}, 'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.');\nvar modeCheck = new PropCheck(function (props) {\n  return props && props.mode && !['datetime', 'date', 'time'].includes(props.mode);\n}, \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\");\nvar colorCheck = new PropCheck(function (props) {\n  return props && props.textColor && !props.textColor.startsWith(\"#\");\n}, \"Invalid text color. Must be a hex string.\");\nvar checks = [widthCheck, heightCheck, modeCheck, colorCheck];","map":{"version":3,"sources":["/home/alex/Desktop/northcoders/project/team-project/node_modules/react-native-date-picker/propChecker.js"],"names":["throwIfInvalidProps","props","checks","forEach","check","validate","PropCheck","isInvalid","errorText","Error","widthCheck","style","width","heightCheck","height","modeCheck","mode","includes","colorCheck","textColor","startsWith"],"mappings":";AAAA,OAAO,SAASA,mBAAT,CAA6BC,KAA7B,EAAoC;AACzCC,EAAAA,MAAM,CAACC,OAAP,CAAe,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAJ;AAAA,GAApB;AACD;;IAEKK,S,GACJ,mBAAYC,SAAZ,EAAuBC,SAAvB,EAAkC;AAAA;;AAAA;;AAAA,OAIlCH,QAJkC,GAIvB,UAAAJ,KAAK,EAAI;AAClB,QAAI,KAAI,CAACM,SAAL,CAAeN,KAAf,CAAJ,EAA2B;AACzB,YAAM,IAAIQ,KAAJ,CACD,KAAI,CAACD,SADJ,+CAAN;AAGD;AACF,GAViC;;AAChC,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACD,C;;AAUH,IAAME,UAAU,GAAG,IAAIJ,SAAJ,CACjB,UAAAL,KAAK;AAAA,SACHA,KAAK,IACLA,KAAK,CAACU,KADN,IAEAV,KAAK,CAACU,KAAN,CAAYC,KAFZ,IAGA,OAAOX,KAAK,CAACU,KAAN,CAAYC,KAAnB,KAA6B,QAJ1B;AAAA,CADY,EAMjB,kGANiB,CAAnB;AASA,IAAMC,WAAW,GAAG,IAAIP,SAAJ,CAClB,UAAAL,KAAK;AAAA,SACHA,KAAK,IACLA,KAAK,CAACU,KADN,IAEAV,KAAK,CAACU,KAAN,CAAYG,MAFZ,IAGA,OAAOb,KAAK,CAACU,KAAN,CAAYG,MAAnB,KAA8B,QAJ3B;AAAA,CADa,EAMlB,oGANkB,CAApB;AASA,IAAMC,SAAS,GAAG,IAAIT,SAAJ,CAChB,UAAAL,KAAK;AAAA,SACHA,KAAK,IAAIA,KAAK,CAACe,IAAf,IAAuB,CAAC,CAAC,UAAD,EAAa,MAAb,EAAqB,MAArB,EAA6BC,QAA7B,CAAsChB,KAAK,CAACe,IAA5C,CADrB;AAAA,CADW,EAGhB,uDAHgB,CAAlB;AAMA,IAAME,UAAU,GAAG,IAAIZ,SAAJ,CACjB,UAAAL,KAAK;AAAA,SACHA,KAAK,IAAIA,KAAK,CAACkB,SAAf,IAA4B,CAAClB,KAAK,CAACkB,SAAN,CAAgBC,UAAhB,CAA2B,GAA3B,CAD1B;AAAA,CADY,EAGjB,2CAHiB,CAAnB;AAOA,IAAMlB,MAAM,GAAG,CAACQ,UAAD,EAAaG,WAAb,EAA0BE,SAA1B,EAAqCG,UAArC,CAAf","sourcesContent":["export function throwIfInvalidProps(props) {\n  checks.forEach(check => check.validate(props))\n}\n\nclass PropCheck {\n  constructor(isInvalid, errorText) {\n    this.isInvalid = isInvalid\n    this.errorText = errorText\n  }\n  validate = props => {\n    if (this.isInvalid(props)) {\n      throw new Error(\n        `${this.errorText} Check usage of react-native-date-picker.`\n      )\n    }\n  }\n}\n\nconst widthCheck = new PropCheck(\n  props =>\n    props &&\n    props.style &&\n    props.style.width &&\n    typeof props.style.width !== 'number',\n  'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.'\n)\n\nconst heightCheck = new PropCheck(\n  props =>\n    props &&\n    props.style &&\n    props.style.height &&\n    typeof props.style.height !== 'number',\n  'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.'\n)\n\nconst modeCheck = new PropCheck(\n  props =>\n    props && props.mode && !['datetime', 'date', 'time'].includes(props.mode),\n  \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\"\n)\n\nconst colorCheck = new PropCheck(\n  props => \n    props && props.textColor && !props.textColor.startsWith(\"#\"),\n  \"Invalid text color. Must be a hex string.\"\n)\n\n\nconst checks = [widthCheck, heightCheck, modeCheck, colorCheck]\n"]},"metadata":{},"sourceType":"module"}