{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/alex/Desktop/northcoders/project/team-project/node_modules/react-native-date-picker/DatePickerAndroid.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport moment from 'moment';\nimport { throwIfInvalidProps } from \"./propChecker\";\nvar NativeDatePicker = requireNativeComponent(\"DatePickerManager\", DatePickerAndroid, {\n  nativeOnly: {\n    onChange: true\n  }\n});\n\nvar DatePickerAndroid = function (_React$PureComponent) {\n  _inherits(DatePickerAndroid, _React$PureComponent);\n\n  var _super = _createSuper(DatePickerAndroid);\n\n  function DatePickerAndroid() {\n    var _this;\n\n    _classCallCheck(this, DatePickerAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._onChange = function (e) {\n      var jsDate = _this._fromIsoWithTimeZoneOffset(e.nativeEvent.date).toDate();\n\n      _this.props.onDateChange && _this.props.onDateChange(jsDate);\n\n      if (_this.props.onDateStringChange) {\n        _this.props.onDateStringChange(e.nativeEvent.dateString);\n      }\n    };\n\n    _this._maximumDate = function () {\n      return _this.props.maximumDate && _this._toIsoWithTimeZoneOffset(_this.props.maximumDate);\n    };\n\n    _this._minimumDate = function () {\n      return _this.props.minimumDate && _this._toIsoWithTimeZoneOffset(_this.props.minimumDate);\n    };\n\n    _this._date = function () {\n      return _this._toIsoWithTimeZoneOffset(_this.props.date);\n    };\n\n    _this._fromIsoWithTimeZoneOffset = function (date) {\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return moment(date);\n      return moment.utc(date).subtract(_this.props.timeZoneOffsetInMinutes, 'minutes');\n    };\n\n    _this._toIsoWithTimeZoneOffset = function (date) {\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return moment(date).toISOString();\n      return moment.utc(date).add(_this.props.timeZoneOffsetInMinutes, 'minutes').toISOString();\n    };\n\n    return _this;\n  }\n\n  _createClass(DatePickerAndroid, [{\n    key: \"render\",\n    value: function render() {\n      if (__DEV__) throwIfInvalidProps(this.props);\n      return React.createElement(NativeDatePicker, _extends({}, this.props, {\n        date: this._date(),\n        minimumDate: this._minimumDate(),\n        maximumDate: this._maximumDate(),\n        onChange: this._onChange,\n        style: [styles.picker, this.props.style],\n        utc: this.props.timeZoneOffsetInMinutes !== undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return DatePickerAndroid;\n}(React.PureComponent);\n\nvar styles = StyleSheet.create({\n  picker: {\n    width: 310,\n    height: 180\n  }\n});\nexport default DatePickerAndroid;","map":{"version":3,"sources":["/home/alex/Desktop/northcoders/project/team-project/node_modules/react-native-date-picker/DatePickerAndroid.js"],"names":["React","requireNativeComponent","moment","throwIfInvalidProps","NativeDatePicker","DatePickerAndroid","nativeOnly","onChange","_onChange","e","jsDate","_fromIsoWithTimeZoneOffset","nativeEvent","date","toDate","props","onDateChange","onDateStringChange","dateString","_maximumDate","maximumDate","_toIsoWithTimeZoneOffset","_minimumDate","minimumDate","_date","timeZoneOffsetInMinutes","undefined","utc","subtract","toISOString","add","__DEV__","styles","picker","style","PureComponent","StyleSheet","create","width","height"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;SACqBC,sB;AACrB,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,mBAAT;AAEA,IAAMC,gBAAgB,GAAGH,sBAAsB,sBAE7CI,iBAF6C,EAG7C;AAAEC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAAd,CAH6C,CAA/C;;IAMMF,iB;;;;;;;;;;;;;;;;UAgBJG,S,GAAY,UAAAC,CAAC,EAAI;AACf,UAAMC,MAAM,GAAG,MAAKC,0BAAL,CAAgCF,CAAC,CAACG,WAAF,CAAcC,IAA9C,EAAoDC,MAApD,EAAf;;AACA,YAAKC,KAAL,CAAWC,YAAX,IAA2B,MAAKD,KAAL,CAAWC,YAAX,CAAwBN,MAAxB,CAA3B;;AACA,UAAI,MAAKK,KAAL,CAAWE,kBAAf,EAAmC;AACjC,cAAKF,KAAL,CAAWE,kBAAX,CAA8BR,CAAC,CAACG,WAAF,CAAcM,UAA5C;AACD;AACF,K;;UAEDC,Y,GAAe;AAAA,aACb,MAAKJ,KAAL,CAAWK,WAAX,IACA,MAAKC,wBAAL,CAA8B,MAAKN,KAAL,CAAWK,WAAzC,CAFa;AAAA,K;;UAIfE,Y,GAAe;AAAA,aACb,MAAKP,KAAL,CAAWQ,WAAX,IACA,MAAKF,wBAAL,CAA8B,MAAKN,KAAL,CAAWQ,WAAzC,CAFa;AAAA,K;;UAIfC,K,GAAQ;AAAA,aAAM,MAAKH,wBAAL,CAA8B,MAAKN,KAAL,CAAWF,IAAzC,CAAN;AAAA,K;;UAERF,0B,GAA6B,UAAAE,IAAI,EAAI;AACnC,UAAI,MAAKE,KAAL,CAAWU,uBAAX,KAAuCC,SAA3C,EAAsD,OAAOxB,MAAM,CAACW,IAAD,CAAb;AAEtD,aAAOX,MAAM,CACVyB,GADI,CACAd,IADA,EAEJe,QAFI,CAEK,MAAKb,KAAL,CAAWU,uBAFhB,EAEyC,SAFzC,CAAP;AAGD,K;;UAEDJ,wB,GAA2B,UAAAR,IAAI,EAAI;AACjC,UAAI,MAAKE,KAAL,CAAWU,uBAAX,KAAuCC,SAA3C,EACE,OAAOxB,MAAM,CAACW,IAAD,CAAN,CAAagB,WAAb,EAAP;AAEF,aAAO3B,MAAM,CACVyB,GADI,CACAd,IADA,EAEJiB,GAFI,CAEA,MAAKf,KAAL,CAAWU,uBAFX,EAEoC,SAFpC,EAGJI,WAHI,EAAP;AAID,K;;;;;;;6BAjDQ;AACP,UAAIE,OAAJ,EAAa5B,mBAAmB,CAAC,KAAKY,KAAN,CAAnB;AACb,aACE,oBAAC,gBAAD,eACM,KAAKA,KADX;AAEE,QAAA,IAAI,EAAE,KAAKS,KAAL,EAFR;AAGE,QAAA,WAAW,EAAE,KAAKF,YAAL,EAHf;AAIE,QAAA,WAAW,EAAE,KAAKH,YAAL,EAJf;AAKE,QAAA,QAAQ,EAAE,KAAKX,SALjB;AAME,QAAA,KAAK,EAAE,CAACwB,MAAM,CAACC,MAAR,EAAgB,KAAKlB,KAAL,CAAWmB,KAA3B,CANT;AAOE,QAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWU,uBAAX,KAAuCC,SAP9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAWD;;;;EAd6B1B,KAAK,CAACmC,a;;AAqDtC,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,MAAM,EAAE;AACNK,IAAAA,KAAK,EAAE,GADD;AAENC,IAAAA,MAAM,EAAE;AAFF;AADuB,CAAlB,CAAf;AAOA,eAAelC,iBAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, requireNativeComponent } from 'react-native'\nimport moment from 'moment'\nimport { throwIfInvalidProps } from './propChecker'\n\nconst NativeDatePicker = requireNativeComponent(\n  `DatePickerManager`,\n  DatePickerAndroid,\n  { nativeOnly: { onChange: true } }\n)\n\nclass DatePickerAndroid extends React.PureComponent {\n  render() {\n    if (__DEV__) throwIfInvalidProps(this.props)\n    return (\n      <NativeDatePicker\n        {...this.props}\n        date={this._date()}\n        minimumDate={this._minimumDate()}\n        maximumDate={this._maximumDate()}\n        onChange={this._onChange}\n        style={[styles.picker, this.props.style]}\n        utc={this.props.timeZoneOffsetInMinutes !== undefined}\n      />\n    )\n  }\n\n  _onChange = e => {\n    const jsDate = this._fromIsoWithTimeZoneOffset(e.nativeEvent.date).toDate()\n    this.props.onDateChange && this.props.onDateChange(jsDate)\n    if (this.props.onDateStringChange) {\n      this.props.onDateStringChange(e.nativeEvent.dateString)\n    }\n  }\n\n  _maximumDate = () =>\n    this.props.maximumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.maximumDate)\n\n  _minimumDate = () =>\n    this.props.minimumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.minimumDate)\n\n  _date = () => this._toIsoWithTimeZoneOffset(this.props.date)\n\n  _fromIsoWithTimeZoneOffset = date => {\n    if (this.props.timeZoneOffsetInMinutes === undefined) return moment(date)\n\n    return moment\n      .utc(date)\n      .subtract(this.props.timeZoneOffsetInMinutes, 'minutes')\n  }\n\n  _toIsoWithTimeZoneOffset = date => {\n    if (this.props.timeZoneOffsetInMinutes === undefined)\n      return moment(date).toISOString()\n\n    return moment\n      .utc(date)\n      .add(this.props.timeZoneOffsetInMinutes, 'minutes')\n      .toISOString()\n  }\n}\n\nconst styles = StyleSheet.create({\n  picker: {\n    width: 310,\n    height: 180,\n  },\n})\n\nexport default DatePickerAndroid\n"]},"metadata":{},"sourceType":"module"}